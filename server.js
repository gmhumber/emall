// This is the project's primary webserver application file


// Import dotenv package for enviromental variables if the enviroment is not production
if (process.env.NODE_ENV !== 'production') {
    require('dotenv').config();
}

// Set the webserver port number and MongoDB URI
const PORT = process.env.PORT || 8080;
//const MONGOURI = 'mongodb://localhost:27017/emall';
const MONGOURI = process.env.MONGOURI;


// Import the required project modules
const express = require('express');
const app = express(); // Create the Express application

// Import dotenv package for enviromental variables if the enviroment is not production
if (process.env.NODE_ENV !== 'production') {
    require('dotenv').config();
}

const path = require('path');
const bodyParser = require('body-parser');
const csrf = require('csurf');

// Modules needed for working with session cookies 
const session = require('express-session');
const MongoDBStore = require('connect-mongodb-session')(session);
const mongoSessionStore = new MongoDBStore({
    uri: MONGOURI,
    collection: 'sessions'
}); 

const databaseController = require('./controllers/databaseController');
const csrfProtection = csrf(); // Create the csurf application object


// Import Express routers
const errorRoutes = require('./routes/errorRoutes');
const storeRoutes = require('./routes/storeRoutes');
const cmsRoutes = require('./routes/cmsRoutes');


// Set rendering engine and location of views files
app.set('view engine', 'ejs');
app.set('views', 'views');


// Invoke the required Express middlewares
app.use(bodyParser.urlencoded( { extended: false } ));
app.use(express.static(path.join(__dirname, 'public')));
app.use(session({
    secret: process.env.SESSION_SECRET, 
    resave: false, 
    saveUninitialized: false, 
    store: mongoSessionStore,
    cookie: {maxAge: 3600000}})
    );
app.use(csrfProtection); // Invoke CSRF protection middleware to protect non-GET routes


app.use((req, res, next) => {
    res.locals.csrfToken = req.csrfToken(); // Set a locals variable with the csrf token generated by the csrfToken() function and pass it to every view. 
    next();
});

app.use(storeRoutes);
app.use(cmsRoutes);
app.use(errorRoutes);



// Connect to the database and start the web server
databaseController.mongoConnect(MONGOURI, () => {
    app.listen(PORT);
    console.log('HTTP server is running on Port: ' + PORT);
});


